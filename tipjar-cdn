<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Tip / Donate</title>
  <meta name="description" content="A unified tipjar / donation page with multiple payment options." />
  <!-- Tailwind CSS (CDN) -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            base: {
              bg: '#0f1115',
              soft: '#151923',
              card: '#0f1115',
              text: '#e6e8ee',
              muted: '#9aa3b2',
              ring: '#2b3344',
              accent: '#6ea8fe'
            }
          },
          boxShadow: {
            soft: '0 8px 28px rgba(0,0,0,.25), 0 2px 6px rgba(0,0,0,.15)'
          },
          borderRadius: { '2xl': '1rem' }
        }
      },
      darkMode: 'media'
    }
  </script>
  <!-- Alpine.js (light reactivity) -->
  <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
  <!-- QRCode.js (CDN) -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
  <style>
    :root { color-scheme: dark light; }
    @media (prefers-color-scheme: light){
      html { background:#f7f7fb; }
    }
    .glass { backdrop-filter: blur(12px); background: rgba(255,255,255,0.04); }
  </style>
</head>
<body class="min-h-screen bg-[color:var(--bg,theme(colors.base.bg))] text-[color:var(--text,theme(colors.base.text))]">

<div class="max-w-6xl mx-auto px-4 py-8" x-data="tipjarApp()" x-init="init()">
  <!-- Header -->
  <header class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
    <div class="flex items-center gap-3">
      <div class="w-10 h-10 rounded-2xl grid place-items-center bg-[color:var(--soft,theme(colors.base.soft))] border border-[color:var(--ring,theme(colors.base.ring))]">
        <svg viewBox="0 0 24 24" fill="none" class="w-6 h-6"><rect width="24" height="24" rx="6" fill="currentColor" opacity="0.1"/><path d="M5 15c2.2 2.2 5.8 2.2 8 0s2.2-5.8 0-8" stroke="currentColor" stroke-width="2" stroke-linecap="round"/><path d="M7 9l3 3 7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round"/></svg>
      </div>
      <div>
        <h1 class="text-2xl md:text-3xl font-bold" x-text="cfg.title"></h1>
        <p class="text-sm text-[color:theme(colors.base.muted)]" x-text="cfg.subtitle"></p>
      </div>
    </div>
    <div class="flex gap-2">
      <button @click="share()" class="px-4 py-2 rounded-xl shadow-soft border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.soft)] hover:-translate-y-0.5 transition">Share</button>
      <button @click="copyAll()" class="px-4 py-2 rounded-xl shadow-soft border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.accent)] text-white hover:-translate-y-0.5 transition">Copy all</button>
    </div>
  </header>

  <!-- Cards grid -->
  <section class="mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
    <!-- Rendered by x-for -->
    <template x-for="card in cards" :key="card.key">
      <article class="flex items-start gap-3 p-4 rounded-2xl shadow-soft border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.card)]">
        <div class="w-12 h-12 rounded-xl grid place-items-center bg-[color:theme(colors.base.soft)] border border-[color:theme(colors.base.ring)]" x-html="icons[card.key] || icons.generic"></div>
        <div class="flex-1 min-w-0">
          <h3 class="font-semibold" x-text="card.title"></h3>
          <p class="text-sm text-[color:theme(colors.base.muted)]" x-text="card.hint"></p>
          <div class="mt-3 flex flex-wrap items-center gap-2">
            <div class="px-2 py-1 rounded-xl border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.soft)] text-xs font-mono truncate max-w-full" x-text="card.code || '—'"></div>
            <div class="ml-auto flex gap-2">
              <button @click="copy(card.code)" class="px-3 py-1.5 rounded-xl border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.soft)] text-sm">Copy</button>
              <template x-if="card.openUrl">
                <a :href="card.openUrl" target="_blank" rel="noopener" class="px-3 py-1.5 rounded-xl border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.soft)] text-sm">Open</a>
              </template>
              <template x-if="card.uri">
                <a :href="card.uri" class="px-3 py-1.5 rounded-xl border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.soft)] text-sm">URI</a>
              </template>
              <template x-if="card.qrPayload">
                <button @click="openQR(card)" class="px-3 py-1.5 rounded-xl border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.soft)] text-sm">QR</button>
              </template>
            </div>
          </div>
        </div>
      </article>
    </template>
  </section>

  <!-- Footer -->
  <footer class="mt-8 text-xs text-[color:theme(colors.base.muted)]">
    <span class="inline-block px-2 py-0.5 rounded-full border border-[color:theme(colors.base.ring)] mr-2">Privacy</span>
    This page is static; it makes no network calls except to CDNs for the UI libraries. Nothing is stored.
    <div class="mt-2">Tipjar boilerplate © <span x-text="year"></span> • MIT‑licensed snippet. Copy, remix, re-use.</div>
  </footer>

  <!-- QR Modal -->
  <dialog x-ref="qrDialog" class="rounded-2xl p-0 border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.card)] max-w-sm w-[92vw]">
    <div class="p-4 flex items-start gap-4">
      <div id="qrBox" class="size-44 rounded-xl border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.soft)] grid place-items-center"></div>
      <div class="flex-1 min-w-0">
        <h3 class="font-semibold" x-text="qr.title"></h3>
        <p class="text-xs text-[color:theme(colors.base.muted)] break-all" x-text="qr.payload"></p>
        <div class="mt-3 flex gap-2">
          <button @click="copy(qr.payload)" class="px-3 py-1.5 rounded-xl border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.soft)] text-sm">Copy</button>
          <a :href="qr.href" target="_blank" rel="noopener" class="px-3 py-1.5 rounded-xl border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.soft)] text-sm" x-show="qr.href">Open</a>
          <button @click="$refs.qrDialog.close()" class="ml-auto px-3 py-1.5 rounded-xl border border-[color:theme(colors.base.ring)] bg-[color:theme(colors.base.soft)] text-sm">Close</button>
        </div>
      </div>
    </div>
  </dialog>
</div>

<script>
function tipjarApp(){
  return {
    year: new Date().getFullYear(),
    cfg: {
      title: 'Tip / Donate',
      subtitle: 'Thanks for supporting my work — pick whatever method is easiest.',

      // Traditional & platforms
      paypalMe: '',          // e.g. "yourname" for paypal.me/yourname
      paypalEmail: '',       // fallback email
      venmo: '',             // e.g. "@yourhandle"
      cashapp: '',           // e.g. "$yourtag"
      zelle: '',             // email or phone
      stripeLink: '',        // Stripe Payment Link URL
      patreon: '',           // username
      kofi: '',              // username
      buymeacoffee: '',      // username
      githubSponsors: '',    // handle
      donorbox: '',          // campaign slug or full URL

      // Bank-ish
      achName: '',
      achRouting: '',
      achAccount: '',

      // Crypto
      btc: '',               // on-chain address
      lightning: '',         // LNURL or Lightning Address (name@domain)
      eth: '',               // 0x...
      sol: '',               // Solana address
      usdcSol: '',           // optional SPL address
      xmr: '',

      // Other custom
      other: [
        // { label: 'Tezos', code: 'tz1...', openUrl: 'https://tzkt.io/tz1...' }
      ],
    },

    cards: [],
    qr: { title: '', payload: '', href: '' },

    init(){
      this.rebuild();
    },

    rebuild(){
      const C = this.cfg; const out = [];
      const push = (o)=> out.push(o);
      const clean = (s)=> (s||'').trim();
      const nonempty = (s)=> !!clean(s);

      // PayPal
      if (nonempty(C.paypalMe) || nonempty(C.paypalEmail)){
        const url = nonempty(C.paypalMe) ? `https://paypal.me/${clean(C.paypalMe)}` : `mailto:${clean(C.paypalEmail)}`;
        push({key:'paypal', title:'PayPal', hint:'PayPal.Me or email', code: nonempty(C.paypalMe) ? `paypal.me/${clean(C.paypalMe)}` : clean(C.paypalEmail), openUrl:url, uri: url, qrPayload:url});
      }
      // Venmo
      if (nonempty(C.venmo)){
        const handle = C.venmo.startsWith('@')? C.venmo : '@'+C.venmo;
        const url = `https://venmo.com/${handle.replace('@','')}`;
        push({key:'venmo', title:'Venmo', hint:'Handle', code: handle, openUrl:url, uri:url, qrPayload:url});
      }
      // Cash App
      if (nonempty(C.cashapp)){
        const tag = C.cashapp.startsWith('$')? C.cashapp : '$'+C.cashapp;
        const url = `https://cash.app/${tag.replace('$','')}`;
        push({key:'cashapp', title:'Cash App', hint:'Cashtag', code: tag, openUrl:url, uri:url, qrPayload:url});
      }
      // Zelle (display only)
      if (nonempty(C.zelle)){
        push({key:'zelle', title:'Zelle', hint:'Email or phone', code: clean(C.zelle)});
      }
      // Stripe Link
      if (nonempty(C.stripeLink)){
        const url = clean(C.stripeLink);
        push({key:'stripe', title:'Card / Apple Pay (Stripe Link)', hint:'Hosted checkout', code: new URL(url).host, openUrl:url, uri:url, qrPayload:url});
      }
      // Patreon
      if (nonempty(C.patreon)){
        const u = clean(C.patreon);
        const url = `https://patreon.com/${u}`;
        push({key:'patreon', title:'Patreon', hint:'Monthly support', code:`patreon.com/${u}`, openUrl:url, uri:url, qrPayload:url});
      }
      // Ko-fi
      if (nonempty(C.kofi)){
        const u = clean(C.kofi); const url = `https://ko-fi.com/${u}`;
        push({key:'kofi', title:'Ko‑fi', hint:'One‑off or monthly', code:`ko-fi.com/${u}`, openUrl:url, uri:url, qrPayload:url});
      }
      // Buy Me a Coffee
      if (nonempty(C.buymeacoffee)){
        const u = clean(C.buymeacoffee); const url = `https://www.buymeacoffee.com/${u}`;
        push({key:'bmac', title:'Buy Me a Coffee', hint:'One‑off or monthly', code:`buymeacoffee.com/${u}`, openUrl:url, uri:url, qrPayload:url});
      }
      // GitHub Sponsors
      if (nonempty(C.githubSponsors)){
        const u = clean(C.githubSponsors); const url = `https://github.com/sponsors/${u}`;
        push({key:'gh', title:'GitHub Sponsors', hint:'Support open source', code:`github.com/sponsors/${u}`, openUrl:url, uri:url, qrPayload:url});
      }
      // Donorbox
      if (nonempty(C.donorbox)){
        const url = C.donorbox.startsWith('http')? clean(C.donorbox): `https://donorbox.org/${clean(C.donorbox)}`;
        push({key:'donorbox', title:'Donorbox', hint:'Nonprofit‑friendly checkout', code:url.replace(/^https?:\/\//,''), openUrl:url, uri:url, qrPayload:url});
      }

      // Bank (display only)
      if (nonempty(C.achRouting) && nonempty(C.achAccount)){
        const name = nonempty(C.achName) ? `${C.achName} · ` : '';
        push({key:'ach', title:'Bank Transfer (ACH)', hint:'Routing · Account', code:`${name}${C.achRouting} · ${C.achAccount}`});
      }

      // Crypto
      if (nonempty(C.btc)){
        const addr = clean(C.btc); const uri = `bitcoin:${addr}`;
        push({key:'btc', title:'Bitcoin', hint:'On‑chain address', code:addr, uri, qrPayload:uri});
      }
      if (nonempty(C.lightning)){
        const ln = clean(C.lightning);
        const uri = ln.startsWith('lnurl') || ln.startsWith('lightning:') ? ln : `lightning:${ln}`;
        push({key:'lightning', title:'Lightning', hint:'LNURL / Lightning Address', code:ln, uri, qrPayload:uri});
      }
      if (nonempty(C.eth)){
        const addr = clean(C.eth); const uri = `ethereum:${addr}`;
        push({key:'eth', title:'Ethereum', hint:'EVM address', code:addr, uri, qrPayload:uri});
      }
      if (nonempty(C.sol)){
        const addr = clean(C.sol); const uri = `solana:${addr}`;
        push({key:'sol', title:'Solana', hint:'SOL / SPL token address', code:addr, uri, qrPayload:uri});
      }
      if (nonempty(C.usdcSol)){
        const addr = clean(C.usdcSol); const uri = `solana:${addr}`;
        push({key:'usdc', title:'USDC (Solana)', hint:'SPL address', code:addr, uri, qrPayload:uri});
      }
      if (nonempty(C.xmr)){
        const addr = clean(C.xmr); push({key:'xmr', title:'Monero', hint:'Address (opaque)', code:addr, qrPayload:addr});
      }

      // Custom
      (C.other||[]).forEach((o,i)=>{ if(!o) return; push({key:'custom', title:o.label||`Method ${i+1}`, hint:o.hint||'Info', code:o.code||'', openUrl:o.openUrl||'', uri:o.uri||o.openUrl||'', qrPayload:o.qr || o.uri || o.openUrl || o.code}); });

      this.cards = out;
    },

    copy(text){
      if(!text) return;
      navigator.clipboard.writeText(String(text)).then(()=> this.toast('Copied')).catch(()=> this.toast('Copy failed', true));
    },
    copyAll(){
      const lines = this.cards.filter(c=>c.code).map(c=> `${c.title}: ${c.code}`);
      this.copy(lines.join('\n'));
    },
    share(){
      const text = this.cfg.subtitle || 'Support my work';
      if (navigator.share){ navigator.share({title: document.title, text, url: location.href}).catch(()=>{}); }
      else { this.copy(location.href); }
    },

    openQR(card){
      const dlg = this.$refs.qrDialog; const box = document.getElementById('qrBox');
      box.innerHTML = '';
      const size = 176;
      new QRCode(box, { text: card.qrPayload, width: size, height: size, correctLevel: QRCode.CorrectLevel.M });
      this.qr = { title: card.title, payload: card.qrPayload, href: card.openUrl || card.uri || '' };
      if (typeof dlg.showModal === 'function') dlg.showModal();
      else dlg.show();
    },

    toast(msg, isErr=false){
      const t = document.createElement('div');
      t.textContent = msg;
      t.className = `fixed bottom-4 left-1/2 -translate-x-1/2 px-3 py-2 rounded-xl text-sm ${isErr? 'bg-red-400 text-black' : 'bg-emerald-400 text-black'} shadow-soft`;
      document.body.appendChild(t);
      setTimeout(()=> t.remove(), 1400);
    },

    icons: {
      generic:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M6 8h12M6 12h12M6 16h8" stroke="currentColor" stroke-width="2" stroke-linecap="round"/></svg>',
      paypal:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M5 17l1.2-7.8C6.5 6.6 8.2 5 10.2 5h5.2c1.9 0 3.4 1.6 3.1 3.5-.3 1.9-2.1 3.5-4 3.5h-3.3l-.7 5H5z" fill="currentColor"/></svg>',
      venmo:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M6 4h12v16H6z" stroke="currentColor" stroke-width="2"/><path d="M9 7l3 10 3-6" stroke="currentColor" stroke-width="2"/></svg>',
      cashapp:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><rect x="3" y="3" width="18" height="18" rx="5" stroke="currentColor" stroke-width="2"/><path d="M9 12c0-1.7 1.3-3 3-3h2M9 12c0 1.7 1.3 3 3 3h2" stroke="currentColor" stroke-width="2" stroke-linecap="round"/></svg>',
      btc:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><circle cx="12" cy="12" r="9" stroke="currentColor" stroke-width="2"/><path d="M10 7h4a3 3 0 010 6h-4V7zm0 6h4a3 3 0 010 6h-4v-6z" stroke="currentColor" stroke-width="2"/></svg>',
      eth:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M12 3l6 9-6 3-6-3 6-9zm0 18l6-9-6 3-6-3 6 9z" fill="currentColor"/></svg>',
      sol:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M6 8l2-2h10l-2 2H6zm0 10l2-2h10l-2 2H6zm0-5l2-2h10l-2 2H6z" fill="currentColor"/></svg>',
      usdc:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><circle cx="12" cy="12" r="9" stroke="currentColor" stroke-width="2"/><path d="M9 12a3 3 0 106 0 3 3 0 10-6 0z" stroke="currentColor" stroke-width="2"/></svg>',
      xmr:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><circle cx="12" cy="12" r="9" stroke="currentColor" stroke-width="2"/><path d="M6 14l6-6 6 6v4H6v-4z" fill="currentColor"/></svg>',
      lightning:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M13 2L3 14h7l-1 8 10-12h-7l1-8z" fill="currentColor"/></svg>',
      stripe:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M4 12c0-4.4 3.6-8 8-8s8 3.6 8 8-3.6 8-8 8" stroke="currentColor" stroke-width="2"/><path d="M8 12h8" stroke="currentColor" stroke-width="2"/></svg>',
      patreon:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><circle cx="14" cy="10" r="6" stroke="currentColor" stroke-width="2"/><rect x="4" y="4" width="3" height="16" fill="currentColor"/></svg>',
      kofi:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M4 8h12a4 4 0 010 8H8l-4-8z" stroke="currentColor" stroke-width="2"/><path d="M7 8v8" stroke="currentColor" stroke-width="2"/></svg>',
      bmac:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M6 18h12l-2-10H8l-2 10z" stroke="currentColor" stroke-width="2"/><circle cx="12" cy="7" r="3" stroke="currentColor" stroke-width="2"/></svg>',
      gh:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M12 2a10 10 0 00-3.2 19.5c.5.1.7-.2.7-.5v-1.8c-3 .7-3.6-1.4-3.6-1.4-.5-1.2-1.2-1.5-1.2-1.5-1-.7.1-.7.1-.7 1.1.1 1.7 1.1 1.7 1.1 1 1.7 2.7 1.2 3.3.9.1-.7.4-1.2.7-1.5-2.4-.3-5-1.2-5-5.4 0-1.2.4-2.1 1.1-2.9-.1-.3-.5-1.5.1-3.1 0 0 .9-.3 3 .9a10.3 10.3 0 015.5 0c2.1-1.2 3-.9 3-.9.6 1.6.2 2.8.1 3.1.7.8 1.1 1.7 1.1 2.9 0 4.2-2.6 5.1-5 5.4.4.4.8 1 .8 2v3c0 .3.2.6.7.5A10 10 0 0012 2z" fill="currentColor"/></svg>',
      donorbox:'<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><rect x="3" y="5" width="18" height="14" rx="3" stroke="currentColor" stroke-width="2"/><path d="M8 9h8v6H8z" stroke="currentColor" stroke-width="2"/></svg>'
    }
  }
}
</script>
</body>
</html>
